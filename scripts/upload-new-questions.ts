
import { initializeApp } from "firebase/app"
import { getFirestore, collection, addDoc, query, where, getDocs } from "firebase/firestore"
import * as fs from 'fs'
import * as path from 'path'

import { firebaseConfig } from "../lib/firebase";
const app = initializeApp(firebaseConfig)
const db = getFirestore(app)

async function uploadJsonQuestions() {
  try {
    console.log("üöÄ Iniciando verificaci√≥n y carga de preguntas...")


    const filePath = path.join(__dirname, 'questions-to-upload.json')

    if (!fs.existsSync(filePath)) {
      console.log("‚ö†Ô∏è No se encontr√≥ archivo para cargar.")
      console.log("Por favor, crea un archivo 'questions-to-upload.json' con el siguiente formato:")

      const exampleQuestion = {
        type: "multiple-choice",
        competence: "1.1",
        level: "B√°sico 2",
        title: "T√≠tulo de la pregunta",
        scenario: "Escenario o contexto de la pregunta",
        options: [
          "Opci√≥n A: Primera opci√≥n",
          "Opci√≥n B: Segunda opci√≥n",
          "Opci√≥n C: Tercera opci√≥n",
          "Opci√≥n D: Cuarta opci√≥n"
        ],
        correctAnswerIndex: 0,
        feedback: {
          correct: "Retroalimentaci√≥n para respuesta correcta",
          incorrect: "Retroalimentaci√≥n para respuesta incorrecta"
        }
      }


      fs.writeFileSync(filePath, JSON.stringify([exampleQuestion], null, 2))
      console.log(`üìÑ Se ha creado un archivo de ejemplo en: ${filePath}`)
      console.log("Edita este archivo con tus preguntas y ejecuta el script nuevamente.")

      return
    }


    const questionsData = fs.readFileSync(filePath, 'utf8')
    let questions

    try {
      questions = JSON.parse(questionsData)

      if (!Array.isArray(questions)) {
        questions = [questions]
      }
    } catch (error) {
      console.error("‚ùå Error al parsear el archivo JSON:", error)
      return
    }

    console.log(`üìã Se encontraron ${questions.length} preguntas para cargar`)


    const validQuestions = questions.filter(q =>
      q.type === "multiple-choice" &&
      q.competence &&
      q.level &&
      q.title &&
      q.scenario &&
      Array.isArray(q.options) &&
      q.options.length >= 2 &&
      typeof q.correctAnswerIndex === "number" &&
      q.feedback &&
      q.feedback.correct &&
      q.feedback.incorrect
    )

    if (validQuestions.length !== questions.length) {
      console.warn(`‚ö†Ô∏è Advertencia: ${questions.length - validQuestions.length} preguntas tienen formato inv√°lido y ser√°n ignoradas`)
    }

    if (validQuestions.length === 0) {
      console.error("‚ùå No hay preguntas con formato v√°lido para cargar")
      return
    }


    console.log("\nüîç Verificando preguntas existentes por competencia...")


    const competenceCodes = [...new Set(validQuestions.map(q => q.competence))].sort()

    const existingCounts: Record<string, number> = {}


    for (const code of competenceCodes) {
      const q = query(collection(db, "questions"), where("competence", "==", code))
      const snapshot = await getDocs(q)
      existingCounts[code] = snapshot.size

      console.log(`   ${code}: ${snapshot.size} preguntas existentes`)
    }


    console.log("\nüì§ Cargando preguntas a Firestore...")

    let addedCount = 0
    const newCounts: Record<string, number> = {}

    for (const question of validQuestions) {

      if (!newCounts[question.competence]) {
        newCounts[question.competence] = 0
      }

      try {

        await addDoc(collection(db, "questions"), {
          ...question,
        })

        addedCount++
        newCounts[question.competence]++
        console.log(`‚úÖ Pregunta agregada: ${question.competence} - ${question.title}`)
      } catch (error) {
        console.error(`‚ùå Error al agregar pregunta "${question.title}":`, error)
      }
    }


    console.log("\nüìä Resumen de la operaci√≥n:")
    console.log(`   Total de preguntas agregadas: ${addedCount}/${validQuestions.length}`)

    console.log("\nüìã Estado final por competencia:")

    for (const code of competenceCodes) {
      const totalCount = (existingCounts[code] || 0) + (newCounts[code] || 0)
      const status = totalCount >= 3 ? "‚úÖ" : "‚ö†Ô∏è"

      console.log(
        `   ${status} ${code}: ${totalCount} preguntas total ` +
        `(${existingCounts[code] || 0} existentes + ${newCounts[code] || 0} nuevas)` +
        `${totalCount < 3 ? " - Se requieren al menos 3" : ""}`
      )
    }

    console.log("\nüéâ ¬°Proceso completado!")

  } catch (error) {
    console.error("‚ùå Error general:", error)
  }
}


uploadJsonQuestions()
